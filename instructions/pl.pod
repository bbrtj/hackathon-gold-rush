=pod

=encoding utf8

=head1 Zasady

Gra odbywa się na jednowymiarowej mapie o skończonych rozmiarach. Pozycja na
mapie jest oznaczana jedną liczbą naturalną. Na mapie znajdują się złoża złota,
których położenie nie jest znane graczom. Liczba tych złóż jest ograniczona.
Gra toczy się w systemie turowym - gracz po skończeniu działań może zdecydować
aby przejść do kolejnej tury, co powoduje postęp wszystkich akcji w czasie.
Gracze mają oddzielne, własne plansze i nie jest możliwa żadna interakcja
między nimi.

Gracz rozpoczyna grę z następującą pulą atutów:

=over

=item

Jedna osada (settlement) na pozycji C<0> z populacją C<3>

=item

C<50> jednostek złota (JZ)

=back

Celem gry jest rozrost infrastruktury i zdobywanie złota poprzez zajmowanie
terenu oraz szkolenie jednostek. Dostępne typy jednostek to:

=over

=item

Odkrywca (explorer), który może odkrywać teren oraz zakładać nowe osady

=item

Robotnik (worker), który wydobywa złoto

=back

Szkolenie nowych jednostek wymaga zmniejszenia populacji osady o C<1> oraz wydania
określonej kwoty w złocie.  Szkolenie jest natychmiastowe i nowa jednostka może
być użyta jeszcze w tej samej turze.

Przyrost populacji w osadach odbywa się automatycznie. Każda osada, która
posiada przynajmniej C<2> jednostki populacji będzie co C<5> tur otrzymywać
dodatkowego mieszkańca. Powyżej 52 mieszkańców, wzrost ten wynosi dwóch
mieszkańców.

Ponieważ nowe osady mają populację 1 nie będą one automatycznie zwiększać
populacji. Możliwy jest transfer populacji (C<resettle>) z jednego miasta do
drugiego. Zajmuje on tyle czasu ile trwałaby podróż innej jednostki. W czasie
transportu populacja nie zwiększa się. Złoto jest dostępne globalnie i nie jest
potrzebny jego przewóz.

Gra będzie toczyć się przez 1000 tur.

=head1 Jednostki

Każda jednostka porusza się z prędkością C<1> pole na turę.

Jednostki mają także określoną długość życia - C<100> tur. Po tym czasie
odchodzą ze starości, nawet podczas pracy w kolpani / wykonywania rozkazu.

=head2 Odkrywca

I<koszt 30 JZ>

Odkrywca może zostać wysłany w celu zbadania terenu (C<send_explorer>). Przy
przechodzeniu przez każdą jednostkę ma C<40%> szansy na wykrycie znajdującego się
tam złoża złota. Po wykryciu zakłada tam kopalnię, która następnie może być
zasiedlona przez robotników. Po osiągnięciu końca ekspedycji odkrywca wraca do
najbliższej osady.

Drugim zadaniem odkrywców jest zakładanie nowych osad (C<send_explorer_settle>).
Nowa osada nie może być założona mniej niż C<5> jednostek od istniejącej. Po
założeniu osady odkrywca przestaje być dostępny. Nowa osada ma populację C<1>.
Jeśli po dotarciu na miejsce została założona druga osada będąca w zbytniej
bliskości z nowopowstającą to odkrywca wraca do najbliższej osady.

=head2 Robotnik

I<koszt 20 JZ>

Robotnik po zasiedleniu kopalni (C<send_worker>) będzie wydobywał z niej C<0.5 JZ> na
turę. Nie ma limitu robotników w kopalni, jednak każda wielokrotność C<5>
robotników powoduje zmniejszenie wydajności kolejnych C<5> o C<20%>. Tak więc
pierwsze pięć robotników w kopalni będzie wydobywać 100%, drugie pięć
80%, trzecie pięć 80% z 80%, czyli 64% itd. Jeśli osada założona jest na
kopalni to robotnik stacjonujący w mieście nie wydobywa z niej złota
automatycznie, musi zostać do niej wysłany. Założenie osady na złożu nie
powoduje automatycznego wydobywania złota przez robotników.

=head1 API

Wszystkie metody przyjmują parametry GET/POST i zwracają obiekt JSON. Obiekt ten ma
zawsze pole C<status> będące wartością prawdziwą w przypadku powodzenia i fałszywą
w przypadku błędu. Dodatkowo pole C<result> informuje o wartości zwróconej z akcji
przy powodzeniu, a pole C<error> informuje o kodzie błędu.

API jest dostępne na porcie 5000.

=over

=item

C<new_player(name): player> - tworzy nową symulację dla gracza o etykiecie
C<name>. Zwraca identyfikator gracza.

=item

C<get_state(player): object> - zwraca stan symulacji dla gracza. Pola obiektu:

	- turn - numer tury
	- gold - ilość złota
	- settlements, mines - informacje o osadach i kopalniach (tablica obiektów)
		- id - identyfikator osady / kopalni
		- population - populacja osady / liczba robotników w kopalni
		- position - pozycja osady / kopalni
	- explorers
		- id - identyfikator jednostki
		- position - pozycja jednostki
		- idle - czy jednostka jest nieobsadzona (1/0)
	- workers
		- id - identyfikator jednostki
		- position - pozycja jednostki
		- idle - czy jednostka jest nieobsadzona (1/0)
		- working - czy jednostka pracuje w kopalni (zawsze fałsz; tylko jednostki, które nie pracują są wymienione)
	- pseudounits - informacje o niby-jednostkach (aktualnie - transporty ludności)
		- id - identyfikator jednostki
		- position - pozycja jednostki
		- idle - czy jednostka jest nieobsadzona (1/0)

=item

C<end_turn(player): turn> - kończy turę gracza. Zwraca numer nowej tury

=item

C<train_worker(player, settlement): worker> - trenuje nowego robotnika w
osadzie. Zwraca identyfikator

=item

C<train_explorer(player, settlement): explorer> - trenuje nowego odkrywcę w
osadzie. Zwraca identyfikator

=item

C<send_worker(player, worker, mine): time> - wysyła robotnika do kopalni.
Zwraca czas wykonania

=item

C<send_explorer(player, explorer, position): time> - wysyła odkrywcę, by
odkrywał teren. Zwraca czas wykonania

=item

C<send_explorer_settle(player, explorer, position): time> - wysyła odkrywcę w
celu utworzenia nowej osady. Zwraca czas wykonania

=item

C<resettle(player, count, settlement_from, settlement_to): time> - wysyła
transport ludności. Zwraca czas wykonania

=back

=head1 WebSocket API

API jest przydatne we wczesnej fazie (pozwala na łatwiejsze stworzenie
odpowiedniej warstwy komunikacji), jednak w przypadku algorytmu przechodzącego
setki tur zaleca się użycie połączenia przez Websocket.

WebSocket jest dostępny na porcie 3000.

Udostępnia on taki sam format jak ten podany powyżej, z kilkoma różnicami:

=over

=item

akcje, które wymagają pola C<player> nie akceptują go jawnie, lecz zamiast tego
akcja C<new_player> zmusza połączenie websocket do przechowywania stanu gracza.

=item

większość zapytań będzie kolejkowana, więc serwer websocket nie zwróci żadnych
danych zwrotnych z pojedynczych akcji. Wyjątkiem od tej reguły jest akcja
C<get_state>, która spowoduje wysłanie wszystkich zakolejkowanych akcji do
serwera oraz zwrócenie stanu symulacji po przeprocesowaniu wszystkich komend w
kolejności w jakiej zostały wydane.

=back

WebSocket wymaga od graczy synchronicznego wykonywania rozkazów poprzez
czekanie na odpowiedź przed wydaniem kolejnego rozkazu.
